Ejercicio 8. el PID de un proceso es el índice de la entrada que su PCB utiliza en la tabla de procesos. Este ejercicio trata sobre cómo podemos modificar la forma en que el Sistema Operativo asigna las entradas en la tabla de procesos (y por tanto, cómo asigna los PIDs). Por defecto, ese PID será 0, pero podemos modificarlo con la opción --InitialPID. En este ejercicio, se pide cambiar ese valor predeterminado 0 por el último elemento de la tabla.

Ejercicio 9. La lista (implementada con un array bimensional con una sola fila, donde se accede a cada elemento (el j-ésimo) mediante la expresión readyToRunQueue[ALLPROCESSESQUEUE][j]).  Cada elemento de readyToRunQueue podría contener el PID de un proceso en estado READY (recuerda que el PID funciona como el índice de la entrada PCB en la tabla de procesos). El número de posiciones de esa matriz que realmente contienen un ID de proceso se almacena en numberOfReadyToRunProcesses[ALLPROCESSESQUEUE] (es decir, las posiciones ocupadas van de j=0 a j=numberOfReadyToRunProcesses[ALLPROCESSESQUEUE] - 1). Los valores de prioridad de los procesos se almacenan en la PCB del proceso (entrada en la tabla de procesos). Si buscas donde se define ALLPROCESSQUEUE, verás un enumerado que solo contiene ese valor (de momento), por tanto, sería equivalente a poner readyToRunQueue[0][j]

Ejercicio 10. El estado de cada proceso se almacena como un entero en el campo estado de su PCB. Puedes usar ese valor para indexar el array statesNames y obtener su nombre como una cadena. ¿Cómo localizar en el código dónde los procesos sufren un cambio de estado? Fácil: basta con buscar en el código las sentencias en las que se asigna un valor al campo state de la PCB de un proceso, es decir, se encuentra a la izquierda de una sentencia de asignación.

